#include <windows.h>
#include <TCHAR.H>
#include <random>
#include "resource.h"
HINSTANCE hInst;
LRESULT CALLBACK WndProc(HWND hwnd, UINT iMsg, WPARAM wParam, LPARAM lParam);
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
	LPSTR lpszCmdLine, int nCmdShow)
{
	HWND 	 hwnd;
	MSG 	 msg;
	WNDCLASS WndClass;
	hInst = hInstance;
	WndClass.style = CS_HREDRAW | CS_VREDRAW;
	WndClass.lpfnWndProc = WndProc;
	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hInstance = hInstance;
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.lpszMenuName = NULL;
	WndClass.lpszClassName = _T("Window Class Name");
	RegisterClass(&WndClass);
	hwnd = CreateWindow(_T("Window Class Name"),
		_T("Window Title Name"),
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		500,
		500,
		NULL,
		NULL,
		hInstance,
		NULL
	);
	ShowWindow(hwnd, nCmdShow);
	UpdateWindow(hwnd);
	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return (int)msg.wParam;
}


void TextPrint(HDC hdc, int x, int y, char text[]);
static TCHAR str[100];

LRESULT CALLBACK WndProc(HWND hwnd, UINT iMsg,
	WPARAM wParam, LPARAM lParam)
{
	static HDC hdc, mem1dc, mem2dc;
	PAINTSTRUCT ps;
	static HBITMAP hBit1, hBit2, oldBit1, oldBit2;
	static RECT rectView;
	static int xPos[5], yPos[5];
	static int count;
	TCHAR word[][30] = { _T("대한민국 화이팅"), _T("프로그래밍"), _T("스텝바이스텝"), _T("워크북"), _T("마이크로소프트") };
	int i;
	BOOL check[5];

	switch (iMsg)
	{
	case WM_CREATE:
		for (int i = 0; i < 5; i++) {
			xPos[i] = rand() % 450 + 30;
			yPos[i] = rand() % 200;
			check[i] = TRUE;
		}
		//yPos = -30;
		count = 0;
		GetClientRect(hwnd, &rectView);
		SetTimer(hwnd, 1, 70, NULL);
		hBit2 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP1));
		break;
	case WM_TIMER:
		for (i = 0; i < 5; i++)

		{
			if (check[i])
				yPos[i] += 5;

			else
				xPos[i]=yPos[i] = -10000;
			if (yPos[i] > rectView.bottom && check[i])
				yPos[i] = -30;
		}

		InvalidateRgn(hwnd, NULL, TRUE);
		return 0;
	case WM_PAINT:
		GetClientRect(hwnd, &rectView);
		hdc = BeginPaint(hwnd, &ps);
		mem1dc = CreateCompatibleDC(hdc);
		mem2dc = CreateCompatibleDC(mem1dc);
		if (hBit1 == NULL)
			hBit1 = CreateCompatibleBitmap(hdc, 530, 530);
		oldBit1 = (HBITMAP)SelectObject(mem1dc, hBit1);
		oldBit2 = (HBITMAP)SelectObject(mem2dc, hBit2);

		BitBlt(mem1dc, 0, 0, 500, 500, mem2dc, 0, 0, SRCCOPY);
		SetBkMode(mem1dc, TRANSPARENT);

		for (int i = 0; i < 5; i++) {
			if (check[i]) {
				TextPrint(mem1dc, xPos[i], yPos[i], word[i]);
			}
			else {
				TextPrint(mem1dc, xPos[i], -100, word[i]);
			}
		}
		BitBlt(hdc, 0, 0, 500, 500, mem1dc, 0, 0, SRCCOPY);
		SelectObject(mem1dc, oldBit1);
		SelectObject(mem2dc, oldBit2);
		DeleteDC(mem2dc);
		DeleteDC(mem1dc);
		EndPaint(hwnd, &ps);
		return 0;
	case WM_CHAR:
		int i;
		switch (wParam)
		{
		case VK_BACK:
			if (count > 0) count--;
			break;

		case VK_RETURN:
			for (i = 0; i < 5; i++)
				if (!strcmp(word[i], str)) {
					check[i] = FALSE;
				}
			count = 0;
			break;

		default:
			str[count++] = wParam;
			str[count] = NULL;
			InvalidateRgn(hwnd, NULL, TRUE);
			break;

		}

		break;


	case WM_DESTROY:
		if (hBit1) DeleteObject(hBit1);
		DeleteObject(hBit2);
		KillTimer(hwnd, 1);
		PostQuitMessage(0);
		break;
	}
	return DefWindowProc(hwnd, iMsg, wParam, lParam);
}

void TextPrint(HDC hdc, int x, int y, char text[])

{
	int i, j;
	SetTextColor(hdc, RGB(255, 255, 255));
	for (i = -1; i <= 1; i++)
		for (j = -1; j <= 1; j++)
			TextOut(hdc, x + i, y + j, text, strlen(text));
	SetTextColor(hdc, RGB(0, 0, 0));
	TextOut(hdc, x, y, text, strlen(text));
	Rectangle(hdc, 200, 400, 400, 500);
	TextOut(hdc, 200, 400, str, strlen(str));
}
